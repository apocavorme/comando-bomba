
#include <Arduino.h>
#include <Hash.h>
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ESP8266HTTPClient.h>
#include <ESPAsyncWiFiManager.h> 
#include "ESP8266HTTPClient.h"

#define SOUND_VELOCITY 0.034

int bateryMeASUREpIN = A0;

const int trigPin = 5;
const int echoPin = 4;

long duration;
long distanciaCm = 0;

float t = 0.0;
float h = 0.0; //  distancia em cm;

const char* receiverAddressLevel = "http://192.168.1.199:81/waterLevel";
const char* receiverAddressBattery = "http://192.168.1.199:81/BatteryLevel";

AsyncWebServer serverA(81);
IPAddress local_IP(192, 168, 1, 198);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
  <style>
    html {
     font-family: Arial;
     display: inline-block;
     margin: 0px auto;
     text-align: center;
    }
    h2 { font-size: 3.0rem; }
    p { font-size: 3.0rem; }
    .units { font-size: 1.2rem; }
    .dht-labels{
      font-size: 1.5rem;
      vertical-align:middle;
      padding-bottom: 15px;
    }
  </style>
</head>
<body>
  <h2>Nivel Caixa Dagua</h2>
  <p>
    <i class="fas fa-thermometer-half" style="color:#059e8a;"></i> 
    <span class="dht-labels">Bateria</span> 
    <span id="temperature">%TEMPERATURE%</span>
    <sup class="units">%</sup>
  </p>
  <p>
    <i class="fas fa-tint" style="color:#00add6;"></i> 
    <span class="dht-labels">Caixa Dagua</span>
    <span id="humidity">%HUMIDITY%</span>
    <sup class="units">%</sup>
  </p>
</body>
<script>
setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("temperature").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/temperature", true);
  xhttp.send();
}, 10000 ) ;

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("humidity").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/humidity", true);
  xhttp.send();
}, 10000 ) ;
</script>
</html>)rawliteral";

// Replaces placeholder with DHT values
String processor(const String& var){
  //Serial.println(var);
  if(var == "TEMPERATURE"){
    return String(t);
  }
  else if(var == "HUMIDITY"){
    return String(h);
  }
  return String();
}















void porTalChama(void)
{ 
//  serverA.end();
//  delay(3000);
  AsyncWebServer server(80);
  DNSServer dns;
  AsyncWiFiManager wifiManager(&server,&dns);
  wifiManager.setConfigPortalTimeout(30);
//wifiManager.autoConnect("Nivel Caixa Dagua", "fezesanais");
  wifiManager.startConfigPortal("Nivel Caixa Dagua", "fezesanais");
//  delay(5000);
//  serverA.begin();
}


void meaSureWaterLevel(void)
{
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(15);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculate the distance
  distanciaCm = duration * SOUND_VELOCITY/2;
  Serial.println(distanciaCm);
  // h = distanciaCm;
   h = ( ( ( (1.30 - ( (distanciaCm * 0.01) - 0.145) ) * 2.313) /3.0) *100);
}
  

//-----------------------------------------------------------------------

void httpGETRequest(const char* serverName) 
{
  WiFiClient client;
  HTTPClient http;
    
  // Your IP address with path or Domain name with URL path 
  http.begin(client, serverName);
  
  // Send HTTP POST request
  int httpResponseCode = http.GET();
  
  String payload = "";
  
  if (httpResponseCode>0) {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    payload = http.getString();
  }
  else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  // Free resources
  http.end();
}

//-----------------------------------------------------------------------









void setup()
{
  Serial.begin(115200);
  
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input

  porTalChama();

  if (!WiFi.config(local_IP, gateway, subnet)) 
  {
    Serial.println("STA Failed to configure");
  }
  
  int counta = 0;
  while ( WiFi.status() != WL_CONNECTED && counta <= 20 ) 
  {
    delay(300);
    Serial.print(".");
    counta++;
  }
  if ( WiFi.status() != WL_CONNECTED )
  {
    Serial.println("");
    Serial.println("Failed to connect, initializing without WIFI");
  }
  else
  {
    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
  }


  // Route for root / web page
  serverA.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });
  serverA.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", String(t).c_str());
  });
  serverA.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", String(h).c_str());
  });

  // Start server
  serverA.begin();
  
}


void loop() 
{
  meaSureWaterLevel();
  t = (((analogRead(bateryMeASUREpIN)-458)*100)/229);
  Serial.println("bateria");
  Serial.println(t);
  httpGETRequest(receiverAddressLevel);
  httpGETRequest(receiverAddressBattery);
  ESP.deepSleep(300e6);
}
